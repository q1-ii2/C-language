void printf2(int(*p)[5], int r, int c)
{
	int i = 0;
	for (i = 0; i < r; i++)
	{
		int j = 0;
		for (j = 0; j < c; j++)
		{
			//printf("%d ", *(*(p + i) + j));
			printf("%d ", p[i][j]);
		}
		printf("\n");
	}
}
void printf(int a[a]);
struct ptr
{

};
int main(void)
{
	int arr[3][5] = { 1,2,3,4,5,2,3,4,5,6,3,4,5,6,7 };
	int a[5];
	printf1(a);
	printf2(arr, 3, 5);
	system("pause");
	return 0;
}

//int arr[5]; arr是整形数组
//int *parr1[10];  parr1整形指针数组
//int(*parr2)[10];  parr2是数组指针
//int(*parr3[10])[5];  parr3是存放数组指针的数组

//int main(void)
//{
//	/*char ch = 'w';
//	char* pc = &ch;
//	*pc = 'b';
//	printf("%c\n", ch);*/
//	//char* p = "abcdef";//把字符串首字符a的地址，赋值给了p
//	const char* p1 = "abcdef";//把字符串首字符a的地址，赋值给了p
//	const char* p2 = "abcdef";
//	//他不能被修改
//	char arr1[] = "abcdef";
//	char arr2[] = "abcdef";
//
//	if (p1 == p2)
//		printf("p1 == p2\n");
//	else
//		printf("p1 != p2\n");
//
//	if (arr1 == arr2)
//		printf("arr1 == arr2\n");
//	else
//		printf("arr1 != arr2\n");
//	//printf("%s\n", p);
//
//	system("pause");
//	return 0;
//}
//指针数组 - 是数组,是用来存放指针的数组
//
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//
//	int* parr[3] = { arr1,arr2,arr3 };
//
//	//0 1 2
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		for (int j = 0; j < 5; j++)
//		{
//			//printf("%d\t", *(parr[i] + j)); 
//			printf("%d\t", (parr[i][j]));
//		}
//		printf("\n");
//	}
//}
//数组名通常表示的都是数组首元素的地址
//但是有2个例外:
//1.sizeof(数组名),这里的数组名表示整个数组,计算的是整个数组的大小
//2.&数组名
//再次讨论数组名
//int main()
//{
	/*int arr[10] = { 0 };
	int* p = arr;
	int(*p2)[10] = &arr;*/



	//int arr[10] = { 0 };
	//printf("%p\n", arr);
	//printf("%p\n", arr + 1);//+4

	//printf("%p\n", &arr[0]);
	//printf("%p\n", &arr[0] + 1);//+4

	//printf("%p\n", &arr);
	//printf("%p\n", &arr + 1);//+40
//}

//int main1()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*p)[10] = &arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", *(p + i));
//	}


	//int i = 0;
	//int sz = sizeof(arr) / sizeof(arr[0]);
	//for (i = 0; i < sz; i++)
	//{
	//	printf("%d ", *(*p+i));//p是指向数组的，*p其实就相当于数组名，数组名又是数组首元素的地址
	//	//所以*p本质上是数组元素的地址
	//}
//	return 0;
//}