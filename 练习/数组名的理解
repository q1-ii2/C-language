//数组名的理解
//指针的运算和指针类型的定义
int main(void)
{
	int a[] = { 1,2,3,4 };
	//指针类型的意义，+1/-1的操作,跳过几个字节(步长)  解引用操作的时候的权限
	printf("%d\n", sizeof(a));//16
	//sizeof(数组名),数组名表示整个数组,计算的是整个数组的大小,单位是字节
	printf("%d\n", sizeof(a + 0));//4
	//a不是单独放在sizeof内部,也没有取地址,所以a就是首元素的地址,a+0还是首元素的地址
	//是地址,大小就是4/8个字节
	printf("%d\n", sizeof(*a));//4
	//*a中的a是数组首元素的地址,*a就是对首元素的地址解引用,找到的就是首元素
	//首元素的大小就是4个字节
	printf("%d\n", sizeof(a + 1));//4
	//这里的a是数组首元素的地址
	//a+1是第二个元素的地址
	//sizeof(a+1)就是地址的大小
	printf("%d\n", sizeof(a[1]));//4
	//计算的是第二个元素的大小
	printf("%d\n", sizeof(&a));//4/8
	//&a取出的数组的地址,数组的地址,也就是个地址
	printf("%d\n", sizeof(*&a));//16
	//&a---> int(*)[4]
	//&a拿到的是数组名的地址,类型是int(*)[4],是一种数组指针
	//数组指针解引用找到的是数组
	printf("%d\n", sizeof(&a + 1));//4/8
	//&a取出的是数组的地址
	//&a--> int(*)[4]
	//&a+1是从数组a的地址向后跳过了一个4个整形元素数组的大小
	printf("%d\n", sizeof(&a[0]));//4/8
	//&a[0]就是第一个元素的地址
	//计算的是地址的大小
	printf("%d\n", sizeof(&a[0] + 1));//4/8
	//&a[0]+1是第二个元素的地址
	//&a[0]+1--->&a[1]


    char arr[] = { 'a','b','c','d','e','f' };
    printf("%d\n", sizeof(arr));//6
    //sizeof(数组名)
    printf("%d\n", sizeof(arr+0));//4/8
    //arr+0是数组首元素的地址
    printf("%d\n", sizeof(*arr));//1
    //*arr就是数组的首元素,大小是1字节
    //*arr --> arr[0]
    //*(arr+0) --> arr[0]
    printf("%d\n", sizeof(arr[1]));//1
    printf("%d\n", sizeof(&arr));//4/8
    printf("%d\n", sizeof(&arr+1));//4/8
    printf("%d\n", sizeof(&arr[0]+1));//4/8
    //&arr[0]+1是第二个元素的地址 
	system("pause");
	return 0;
}