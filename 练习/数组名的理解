//数组名的理解
//指针的运算和指针类型的定义
int main(void)
{
	int a[] = { 1,2,3,4 };
	//指针类型的意义，+1/-1的操作,跳过几个字节(步长)  解引用操作的时候的权限
	printf("%d\n", sizeof(a));//16
	//sizeof(数组名),数组名表示整个数组,计算的是整个数组的大小,单位是字节
	printf("%d\n", sizeof(a + 0));//4
	//a不是单独放在sizeof内部,也没有取地址,所以a就是首元素的地址,a+0还是首元素的地址
	//是地址,大小就是4/8个字节
	printf("%d\n", sizeof(*a));//4
	//*a中的a是数组首元素的地址,*a就是对首元素的地址解引用,找到的就是首元素
	//首元素的大小就是4个字节
	printf("%d\n", sizeof(a + 1));//4
	//这里的a是数组首元素的地址
	//a+1是第二个元素的地址
	//sizeof(a+1)就是地址的大小
	printf("%d\n", sizeof(a[1]));//4
	//计算的是第二个元素的大小
	printf("%d\n", sizeof(&a));//4/8
	//&a取出的数组的地址,数组的地址,也就是个地址
	printf("%d\n", sizeof(*&a));//16
	//&a---> int(*)[4]
	//&a拿到的是数组名的地址,类型是int(*)[4],是一种数组指针
	//数组指针解引用找到的是数组
	printf("%d\n", sizeof(&a + 1));//4/8
	//&a取出的是数组的地址
	//&a--> int(*)[4]
	//&a+1是从数组a的地址向后跳过了一个4个整形元素数组的大小
	printf("%d\n", sizeof(&a[0]));//4/8
	//&a[0]就是第一个元素的地址
	//计算的是地址的大小
	printf("%d\n", sizeof(&a[0] + 1));//4/8
	//&a[0]+1是第二个元素的地址
	//&a[0]+1--->&a[1]


    char arr[] = { 'a','b','c','d','e','f' };
    printf("%d\n", sizeof(arr));//6
    //sizeof(数组名)
    printf("%d\n", sizeof(arr+0));//4/8
    //arr+0是数组首元素的地址
    printf("%d\n", sizeof(*arr));//1
    //*arr就是数组的首元素,大小是1字节
    //*arr --> arr[0]
    //*(arr+0) --> arr[0]
    printf("%d\n", sizeof(arr[1]));//1
    printf("%d\n", sizeof(&arr));//4/8
    printf("%d\n", sizeof(&arr+1));//4/8
    printf("%d\n", sizeof(&arr[0]+1));//4/8
    //&arr[0]+1是第二个元素的地址 

    printf("%d\n", strlen(arr));//随机值>=6
    printf("%d\n", strlen(arr + 0));//随机值>=6
    printf("%d\n", strlen(*arr));//-->strlen('a');-->strlen(97); //野指针
    printf("%d\n", strlen(arr[1]));//-->strlen('b');-->strlen(98); //野指针
    printf("%d\n", strlen(&arr));//随机值
    printf("%d\n", strlen(&arr + 1));//随机值-6
    printf("%d\n", strlen(&arr[0] + 1));//随机值-1
	
    char arr[] = "abcdef";
    //[a b c d e f \0]
    printf("%d\n", sizeof(arr));//7
    printf("%d\n", sizeof(arr+0));//4/8
    printf("%d\n", sizeof(*arr));//1
    printf("%d\n", sizeof(arr[1]));//1
    printf("%d\n", sizeof(&arr));//4/8
    printf("%d\n", sizeof(&arr+1));//4/8
    printf("%d\n", sizeof(&arr[0]+1));//4/8

    //strlen是求字符串长度的，关注的是字符串中的\0,计算的是\0之前出现的字符的个数
    //strlen是库函数,只针对字符串
    //sizeof只关注空间的大小,不在乎内存中放的是什么
    //sizeof是操作符
    printf("%d\n", strlen(arr));//6
    printf("%d\n", strlen(arr + 0));//6
    printf("%d\n", strlen(*arr));//err
    printf("%d\n", strlen(arr[1]));//err
    printf("%d\n", strlen(&arr));//6
    printf("%d\n", strlen(&arr + 1));//随机值
    printf("%d\n", strlen(&arr[0] + 1));//5
    
    char* p = "abcdef";
    //abcdef\0是一个常量字符串 *p指向的是首地址
    printf("%d\n", sizeof(p));//4/8
    printf("%d\n", sizeof(p+1));//4/8
    printf("%d\n", sizeof(*p));//1
    printf("%d\n", sizeof(p[0]));//1
    printf("%d\n", sizeof(&p));//4/8
    printf("%d\n", sizeof(&p + 1));//4/8
    printf("%d\n", sizeof(&p[0]+1));//4/8
    
    printf("%d\n", strlen(p));//6
	printf("%d\n", strlen(p + 1));//5
	printf("%d\n", strlen(*p));//err
	printf("%d\n", strlen(p[0]));//err
	printf("%d\n", strlen(& p));//随机值
	printf("%d\n", strlen(&p + 1));//随机值
	printf("%d\n", strlen(&p[0] + 1));//5


	int a[3][4] = { 0 };
	printf("%d\n", sizeof(a));//48
	printf("%d\n", sizeof(a[0][0]));//4
	printf("%d\n", sizeof(a[0]));//16
	//arr[0]是第一行这个一维数组的数组名，单独放在sizeof内部，a[0]表示第一个整个一维数组
	//sizeof(a[0])计算的就是第一行的大小
	printf("%d\n", sizeof(a[0] + 1));// 4
	//a[0]并没有单独放在sizeof内部,也没取地址,,a[0]就表示首元素的地址
	//就是第一行这个一维数组的第一个元素的地址,a[0]+1就是第一行第二个元素的地址
	printf("%d\n", sizeof(*(a[0] + 1)));//4
	//a[0]+1就是第一行第二个元素的地址
	//*(a[0]+1))就是第一行第二个元素
	printf("%d\n", sizeof(a + 1));//4/8
	//a虽然是二维数组的地址,但是没有单独放在sizeof内部,也没有取地址
	//a表示首元素的地址,二维数组的首元素是他的第一行,a就是第一行的地址
	//a+1就是跳过第一行,表示第二行的地址
	printf("%d\n", sizeof(*(a + 1)));//16
	//*(a+1)是对第二行地址的解引用,拿到的是第二行
	//*(a+1)-->a[1]
	//sizeof(*(a+1))-->sizeof(a[1])
	//sizeof(*(a+1))-->sizeof(a[1])
	printf("%d\n", sizeof(&a[0] + 1));//4/8
	//&a[0] - 对第一行的数组名取地址,拿出的是第一行的地址
	//&a[0]+1 - 得到的是第二行的地址
	printf("%d\n", sizeof(*(&a[0] + 1)));//16
	printf("%d\n", sizeof(*a));//16
	//a表示首元素的地址,就是第一行的地址
	//*a就是对第一行地址的解引用,拿到的就是第一行
	printf("%d\n", sizeof(a[3]));//16
	//和printf("%d\n", sizeof(a[0]));是一样的
	//不会真的访问第四行,只关注类型
    system("pause");
	return 0;
}