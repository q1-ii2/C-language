#define _CRT_SECURE_NO_WARNINGS 1
#include<windows.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#include<assert.h>//断言函数
#define x 10
//输入包含三行

//第一行包含两个正整数n,m,用空格分隔.n表示第二行第一个升序序列中数字的个数
//m表示第三行第二个升序序列中数字的个数.

//第二行包含n个整数,用空格分隔

//第三行包含m个整数,用空格分隔

//输出为一行,输出长度为n+m的升序序列,即长度为n的升序序列和长度为m的升序序列中
//的元素重新进行升序排序排列合并.

int main(void)
//{
//	int n = 0;
//	int m = 0;
//	printf("请输入两行数组的长度:");
//	scanf("%d %d", &n, &m);
//	int arr1[1000];
//	int arr2[1000];
//	printf("请输入第一行的%d个数:", n);
//	for (int i = 0; i < n; i++)scanf("%d", &arr1[i]);
//	printf("请输入第二行 的%d个数:", m);
//	for (int i = 0; i < m; i++)scanf("%d", &arr2[i]);
//	int j = 0;
//	int k = 0;
//	while (j < n && k < m)
//	{
//		if (arr1[j] < arr2[k])
//		{
//			printf("%d ", arr1[j]);
//			j++;
//		}
//		else
//		{
//			printf("%d ", arr2[k]);
//			k++;
//		}
//	}
//	if (j < n)
//	{
//		for (; j < n; j++)printf("%d ", arr1[j]);
//	}
//	else
//	{
//		for (; k < m; k++)printf("%d ", arr2[k]);
//	}
//
//	system("pause");
//	return 0;
//}
//两种方法都可以，第二种是存储输出
int main(void)
{
	int n = 0;
	int m = 0;
	printf("请输入两行数组的长度:");
	scanf("%d %d", &n, &m);
	int arr1[1000];
	int arr2[1000];
	int arr3[1000];
	printf("请输入第一行的%d个数:", n);
	for (int i = 0; i < n; i++)scanf("%d", &arr1[i]);
	printf("请输入第二行的%d个数:", m);
	for (int i = 0; i < m; i++)scanf("%d", &arr2[i]);
	int j = 0;
	int k = 0;
	int r = 0;
	while (j < n && k < m)
	{
		if (arr1[j] < arr2[k])
		{
			arr3[r++] = arr1[j];
			j++;
		}
		else
		{
			arr3[r++] = arr2[k];
			k++;
		}
	}
	if (j < n)
	{
		for (; j < n; j++)arr3[r++] = arr1[j];
	}
	else
	{
		for (; k < m; k++)arr3[r++] = arr2[k];
	}
	for (int i = 0; i < m + n; i++)
	{
		printf("%d ", arr3[i]);
	}
	system("pause");
	return 0;
}