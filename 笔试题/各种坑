int main(void)
{
	int a[5] = { 1,2,3,4,5 };
	int* ptr = (int*)(&a + 1);
	printf("%d,%d", *(a + 1), *(ptr - 1));
	system("pause");
	return 0;
}
//输出结果为2,5

//(&a+1)中&a表示的是整个数组+1就是指向下一个数组

struct Test
{
	int Num;
	char* pcName;
	short sDate;
	char cha[2];
	short sBa[4];
}*p = (struct Test*)0x100000;
//假设p 的值为0x100000。如下表表达式的值分别为多少？
//已知,结构体Test类型的变量大小是20个字节
int main()
{
	printf("%p\n", p + 0x1);
	//结构体指针+1跳过一个结构体
	//0x100000+20-->0x100014
	printf("%p\n", (unsigned long)p + 0x1);
	//1,048,567+1-->1,048,,577
	//0x100001
	printf("%p\n", (unsigned int*)p + 0x1);
	//0x100000+4-->0x100004
	printf("%p\n", (unsigned short*)p + 0x1);
}
//输出结果为0x1000014 0x100001 0x100004

int main()
{
	int a[4] = { 1,2,3,4 };
	int* ptr1 = (int*)(&a + 1);
	int* ptr2 = (int*)((int)a + 1);
	printf("%x,%x", ptr1[-1], *ptr2);
	//01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00
	//	 ^-ptr2										 ^-ptr1
	//ptr2要调用的话,向后访问一个整形,以小端形式返回一个值就是02000000
	return 0;
}
//输出结果为4,2000000

int main()
{
	int a[3][2] = { (0,1),(2,3),(4,5) };
	//应该用大括号括起来，用小括号的话里面的逗号就会变成表达式
	//会选择后面的数输出，这个题数组就为1,3,5
	//int a[3][2] = { {0,1},{2,3},{4,5} };
	int* p;
	p = a[0];
	printf("%d", p[0]);
} 
//输出结果为1

int main()
{
	int a[5][5];
	int(*p)[4];
	p = a;
	//p=a就是a代表的是int(*)[5]的地址，一行的地址
	//而p代表的就是int(*)[4]的地址,他们两个类型不同
	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
}
	//会输出-4的地址和-4

int main()
{
	int aa[2][5] = { 1,2,3,4,5,6,7,8,9,10 };
	int* ptr1 = (int*)(&aa + 1);//&aa表示整个二维数组的地址
	int* ptr2 = (int*)(*(aa + 1));//aa表示的是第一行的地址 aa+1表示的是一行,*(aa+1)表示的是单个6
	printf("%d,%d", *(ptr1 - 1), *(ptr2 - 1));
}
//输出的是10,5

int main()
{
	char* a[] = { "work","at","alibaba" };
	char** pa = a;

	pa++;
	printf("%s\n", *pa);
	return 0;
}
//打印结果为at