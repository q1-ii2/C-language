
//比较两个整形元素
//e1指向一个整数
//e2指向另一个整数
int cmp_int(const void* e1, const void* e2)
{
	/*if (*(int*)e1 > *(int*)e2)
		return 1;
	else if (*(int*)e1 == *(int*)e2)
		return 0;
	else return -1;*/
	return (*(int*)e1 - *(int*)e2);
}


void Swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}
//冒泡排序
void bubble_sort(void* base, int sz, int width, int(*cmp)(const void* e1, const void* e2))
{
	for (int i = 0; i < sz - 1; i++)
	{
		int flag = 1;//假设数组是排好序
		//一趟冒泡排序的过程
		for (int j = 0; j < sz - 1 - i; j++)
		{
			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width) > 0)
			{
				//交换
				Swap((char*)base + j * width, (char*)base + (j + 1) * width, width);
				flag = 0;
			}
		}
		if (flag == 1)break;
	}
}

//qsort - 这个函数可以排序任意类型的数据
//void qsort(void* base,//你要排序的数据的起始位置 
//	size_t num, //待排序的数据元素的个数
//	size_t width, //待排序的数据元素的大小(单位是字节)
//	/*__cdec1 - 函数调用约定 */
//	int(__cdecl* cmp)(const void* e1, const void* e2)//函数指针
//);


void test3()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	//int arr[] = { 0,1,2,3,4,5,6,7,8,9 };
	//把数组排成升序
	int sz = sizeof(arr) / sizeof(arr[0]);
	//bubble_sort(arr, sz);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	for (int i = 0; i < sz; i++)
		printf("%d ", arr[i]);
}


struct Stu
{
	char name[20];
	int age;
};
int com_stu_by_name(const void* e1, const void* e2)
{
	return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);

}
//void*指针类型可以接收任意类型的地址
int com_stu_by_age(const void* e1, const void* e2)
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}//一队字符一队字符比的

void test2()
{
	struct Stu s[] = { {"zhangsan",15},{"lisi",30},{"wangwu",25} };
	int sz = sizeof(s) / sizeof(s[0]);
	//qsort(s, sz, sizeof(s[0]), com_stu_by_name);
	qsort(s, sz, sizeof(s[0]), com_stu_by_age);
	for (int i = 0; i < 3; i++)printf("%s %d\n", s[i].name, s[i].age);
}



int main()
{
	//test2();
	test3();
	//for(int i=0;i<3;i++)printf("%s %d\n",s.name,s.age)
	return 0;
}


//int main()
//{
//	int a = 10;
//	//char* pa=&a;//int*
//	void* pv = &a;//void*是无具体类型的指针,可以接受任意类型的地址
//	//void*是无具体类型的指针,所以不能解引用操作,也不能+-整数
//