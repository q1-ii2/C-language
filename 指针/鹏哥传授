int main1()
{
	//int a = 10;//a是一个整型变量，占用四个字节空间
	//int *pa = &a;
	//printf("%p", pa);

	//指针变量是用来存放地址的，地址是唯一标识一块地址空间的
	//指针的大小在32位平台是4个字节，在64位平台是8个字节
	//本质上指针就是地址
	//口语中说的指针,其实是指针变量,指针变量就是一个变量,指针变量是用来存放地址的一个变量
	char* pc = NULL;
	short* ps = NULL;
	int* pi = NULL;
	double* pd = NULL;
	printf("%u\n", sizeof(pc));
	printf("%u\n", sizeof(ps));
	printf("%u\n", sizeof(pi));
	printf("%u\n", sizeof(pd));
	return 0;
}

//int main()
//{
//	int a = 10;
//	int* str=&a;
//	int* all = &*str;
//	printf("*str=[%p]\n", &str);
//	printf("*all=[%p]", &all);
//
//}
//
//int main2()
//{
//	char* pc = (char*)&a;//int*
//	*pc = 0;
//	//结论
//	//指针类型决定了指针在被引用的时候访问几个字节
//	//如果是int*的指针,解引用访问4个字节
//	//如果是char*的类型,解引用访问1鸽子姐
//	//推广到其他类型
//	//
//}

//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	char* pc = (char*)&a;
//	printf("pa=%p\n", pa);
//	printf("pa+1=%p\n", pa+1);//int类型加了四个字节
//	printf("pa=%p\n", pc);
//	printf("pa+1=%p\n", pc+1);//char类型加了一个字节
//	//结论2
//	//指针的类型决定了指针+-1操作的时候,跳过几个字节
//	//决定了指针的步长
//
//	//100 - 10进制
//	//0x64 - 16进制
//	//110 0100 - 2进制
//	//144 - 8进制
//
//}
//int main()//解引用法
//{
//    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//    int* p1 = arr;//取出的是首元素地址,此时(方法一)使用for循环打印数组比较方便，如下
//    int i = 1;
//    for (i = 0; i < 10; i++)
//    {
//        printf("%p ", *p1 + i);//*p1是解引用，取出里面的值  &arr是打印地址
//		printf("%p ", &arr[i]);
//	}
//    return 0;
//}

//int main()//指针数组法
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int(*p2)[10] = &arr;//取出的是整个数组地址,此时(方法二)使用for循环打印数组比较复杂,如下
//	int i = 1;//p2是指针,指向的是数组,数组是10个元素,每个元素是int类型
//	for (int i = 0; i < 10; i++)//(*pa)是解引用找到整个数组,即数组名,即首元素地址
//	{			//(*pa)+i表示首元素地址逐个向后+1
//		printf("%d ",*((*p2)+i));//*((*pa))表示首元素地址逐个向后+1并解引用,*表示解引用
//	}
//}

int main()
{
	int a = 0;
	int* pi = &a;//pi解引用访问4个字节,pi+1也是跳过4个字节
	float* pf = &a;//pf解引用访问4个字节,pf+1也是跳过4个字节
	//int*和float*不可以通用
	//*pi=100;
	*pf = 100.0;//对内存的解读方式是有所差异的
}


//int main(void)
//{
//	int a = 10;
//	int* pa = &a;//pa是一个指针变量,同时也是一级指针变量
//	int* * ppa = &pa;
//	printf("%d\n", **ppa);
//	printf("%p\n", pa);
//	printf("%p\n", &(**ppa));
//	printf("%p\n", &(*pa));
//	printf("%p\n", &a);
//	system("pause");
//	return 0;
//	
//}

//指针数组
//存放指针的数组就是指针数组
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//
//	int arr[10]；
//
//	int* pa = &a;
//	int* pb = &b;
//	int* pc = &c;
//
//	//parr就是存放指针的数组
//	//指针数组
//	int* parr[10] = { &a,&b,&c };
//}

int main()
{
	int arr1[4] = { 1,2,3,4 };
	int arr2[4] = { 2,3,4,5 };
	int arr3[4] = { 3,4,5,6 };

	int* parr[3] = { arr1,arr2,arr3 };
	int i = 0;
	for (int i = 0; i < 3; i++)
	{
		int j = 0;
		for (int j = 0; j < 4; j++)
		{
			printf("%d", parr[i][j]);
		}
		printf("\n");
	}
}



//int main(void)
//{
//	//概念:野指针就是指针指向的位置是不可知的(随机的,不正确的,没有明确限制的)
//	int* p;
//	//p没有初始化,就意味着没有明确的指向
//	//一个局部变量不初始化的话,放的是随机值:0xcccccccc
//	
//	system("pause");
//	return 0;
//	
//}

int main()
{
	//int arr[10] = { 0 };
	//int* p = arr;//arr[0]
	//for (int i = 0; i < 10; i++)
	//{
	//	*p = i;
	//	p++; 
	//}
	
	/*int* p2 = NULL;
	*p2 = 100;//err*/

	int* p3 = NULL;//指针初始化
				   //小心指针越界
				   //指针指向空间释放及时NULL
				   //避免返回局部变量的地址
				   //指针使用之前检查有效性
	if (p3 != NULL)//if(p3)
	{
		*p3 = 100;
	}

	return 0;
}

//int main(void)
//{
//	/*int arr[10] = { 0 };
//	printf("%d\n", &arr[9] - &arr[0]);*///指针-指针的绝对值 得到的是指针和指针之间元素的个数/距离
//	//不是所有的指针都能相减
//	//指向同一块空间的两个指针才能相减
//	int arr[10] = { 0 };
//	int all[5] = { 0 };
//	printf("%d\n", &arr[10] - &arr[5]);
//	system("pause");
//	return 0;
//	
//}

//int main()
//{
//	int len = strlen("abcdef");
//	printf("%d\n", len);
//	return 0;
//}