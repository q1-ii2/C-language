// demo123.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<stdlib.h>
#include<windows.h>
#include<time.h>

#define MAX  10000000

/*
研究排序算法，目标，1000万数据，1秒内搞定。
           时间，单位毫秒
排序算法   1万    10万    100万     1000万
冒泡排序   171    21000   没必要测试了
选择排序   62     6156    没必要测试了
插入排序   47     4567    没必要测试了
希尔排序   0      16      187        2500  
快速排序   0      0        78        953
归并排序   0      0       125       1343
堆排序     0      16      281       4047

*/

/*
// 冒泡排序过程
  10  9 3 8 2 1 5 7 4 
  9  3 8 2 1 5 7 4 [10] 
  3 8 2 1 5 7 4 [9 10] 
  3 2 1 5 7 4 [8 9 10]
  2 1 3 5 4 [7 8 9 10]
  1 2 3 4 [5 7 8 9 10]
  1 2 3 [4 5 7 8 9 10]
  1 2 [3 4 5 7 8 9 10]
  1 [2 3 4 5 7 8 9 10]
  [1 2 3 4 5 7 8 9 10]


  //选择排序过程
  10  9 3 8 2 1 5 7 4 
  [1] 9 3 8 2 10 5 7 4 
  [1 2] 3 8 9 10 5 7 4 
  [1 2 3] 8 9 10 5 7 4 
  [1 2 3 4] 9 10 5 7 8 
  [1 2 3 4 5] 10 9 7 8 
  [1 2 3 4 5 7] 9 10 8 
  [1 2 3 4 5 7 8] 10 9 
  [1 2 3 4 5 7 8 9] 10  
  [1 2 3 4 5 7 8 9 10]  

 // 插入排序
 19 2 38 4 56 12 34 27 48 
【19】 2 38 4 56 12 34 27 48
【2 19】 38 4 56 12 34 27 48
【2 19 38】 4 56 12 34 27 48
【2 4 19 38】 56 12 34 27 48
【2 4 19 38 56】 12 34 27 48
【2 4 12 19 38 56】 34 27 48
【2 4 12 19 34 38 56】 27 48
【2 4 12 19 27 34 38 56】 48
【2 4 12 19 27 34 38 48 56】 



  希尔排序
9/2==4 /2 ==2 

19 2 38 4 56 12 34 27 48 
19 2 34 4 48 12 38 27 56
19 2 34 4 38 12 48 27 56
2 4 12 19 27 34 38 48 56

快速排序

19 2 38 4 56 12 34 27 48 
12 2 4 [19] 56 38 34 27 48 
4  2 [12] [19]48 38 34 27 [56]  
2 [4] [12] [19]27 38 34 [48] [56]  
2 [4] [12] [19][27] 38 34 [48] [56]  
2 [4] [12] [19][27] 34 [38] [48] [56]  


归并排序

19 2 38 4 56 12 34 27 48 
[19][2][38][4][56][12][34][27][48] 
[2 19][4 38][12 56][27 34][48]
[2 4 19 38][12 27 34 56][48]
[2 4 12 19 27 34 38 56][48]
[2 4 12 19 27 34 38 48 56]


*/


int data[MAX];

void Init()
{
	
	srand(time(NULL));
	for(int i=0;i<MAX;i++)
	{
		data[i] = rand();
	}
}

void Show()
{
	if (MAX>100) return;
	for(int i=0;i<MAX;i++)
	{
		printf("%d ",data[i]);
	}
	printf("\n");
}


// 冒泡排序算法
void Sort()
{
	for(int i=0;i<MAX-1;i++)
	{
		for(int j=0;j<MAX-1-i;j++)
		{
			if (data[j] > data[j+1] )
			{
				int t = data[j];
				data[j] = data[j+1];
				data[j+1] = t;
			}
		}
	}
}

// 选择排序
void Sort1()
{

	for(int i=0;i<MAX-1;i++)
	{
		int p = i;

		for(int j=i+1;j<MAX;j++)
		{
			if (data[p] > data[j])
			{
				p = j;			
			}
		}
	//	if (i!=p)
		{
			int t=data[i];
			data[i] =data[p];
			data[p] = t;
		}

	}
}
// 插入排序
void Sort2()
{
	// 第二个数开始到最后一个数结束，循环
	for(int i=1;i<MAX;i++)
	{
		// 取第二组第一个数，未排序的第一个数。
		int t = data[i];
		// 与第一组最后一个数开始往前比较，
		for(int j=i-1;j>=0;j--)
		{
			// 发现前面的数，比第二组第一个数大，往后移动一个位置。
			if (data[j] > t )
			{
				//往后移动一个位置。
				data[j+1] = data[j];
			}
			else
			{
				// 如果前面的数，比第二组第一个数，小，结束循环
				break;
			}
		}
		// 结束循环有两种课程，第一种，找到一个比第二组第一个数，小的数，第二组，所有数，都比第二组第一个数大。
		// 两种情况，都一样，把第二组第一个数，放到空位置，j+1。完成一个数的插入排序。
		data[j+1] = t;

	}

}
// 希尔排序
void Sort3()
{

	int n=MAX/2;
	int x=2;
	while(n>0)
	{
		printf("%d\n",n);
		// 根据当前组数，n，进行插入排序。

		
		// 第一组第二个数，开始，一直到最后一个数，每个数，进行组内排序。
		for(int i=n;i<MAX;i++)
		{
			//组内排序，插入排序。
			int k = data[i];
			int j=i-n;	
			while(j>=0 )
			{
				if (data[j] > k)
				{
					data[j+n] = data[j];
					j=j-n;
				}
				else
				{
					break;
				}				
			}
			data[j+n] = k;

		

		}

		// 修改分组的数量。
		/*
		if (n>x)
		{
			n = n / x;
		}
		else
		{
			n = n/2;
		}
		*/
		n = n/2;
		
	}


}

// 快速排序
// data是数组。start和end是开始和结束的索引。

void Sort4(int start,int end)
{
	//思路：从最前面拿出一个数，当做中间数，分割数，利用他把所有数分两组。

	// 因为start，end不能变，所以，定义i，j表示开始和结束范围。
	int i = start;
	int j = end;

	// 最前面拿一个数，当中间数。
	int k = data[i];

	// 前面数索引 小于 后面数索引，继续循环，直到前后相遇，相等
	while(i<j)
	{
		// 从后往前找，小的数，往前放。
		while( i < j )
		{
			// 如果后面的数大于中间数，继续往前找
			if(data[j]>k)
			{
				j--;
			}
			else
			{
				// 后面找到小于中间数的数，放到前面空位置。
				data[i] = data[j];
				i++;
				//循环结束，开始前面往后找，下一个循环。
				break;
			}
		}
		// 前面往后找一个大于中间数的数。
		while(i<j)
		{
			// 如果前面找到的数，小于中间数，继续循环。
			if (data[i]<k)
			{
				i++;
			}else
			{
				// 前面找到大于中间数的数，放到后面位置。
				data[j] = data[i];
				j--;
				// 循环结束，开始下一次循环比较。再从后面找一个数，比中间数，小的数。
				break;
			}
		}
		//printf("%d,%d\n",i,j);
	}
	
	data[i] = k;
	// 对中间数，前面部分排序。继续分割，前提是，至少要有两个数。
	if ( start<i-1)
	{
		Sort4(start,i-1);
	}
	// 对中间数，后面部分排序。继续分割，前提是，至少要有两个数。
	if (i+1<end)
	{
		Sort4(i+1,end);
	}


}
// 归并排序
// 可以合并相邻的两组数据到一组。
void Merge(int src[],int dst[],int start1,int start2,int stop2)
{
	int i = start1;
	int j = start2;
	int k = stop2;
	int x = start1;

	// 两组都有数据时，满足下面条件。
	while(i<start2&&j<=stop2)
	{
		if(src[i] < src[j])
		{
			dst[x++] = src[i++];
		}
		else
		{
			dst[x++] = src[j++];
		}
	}
	// 上面循环结束。说明至少其中一组中，没有数据了。
	// 如果第一组还有数据，就直接循环移动到目标位置。
	while(i<start2)
	{
		dst[x++] = src[i++];
	}
	// 如果第二组还有数据，就直接循环移动到目标位置。
	while(j<=stop2)
	{
		dst[x++] = src[j++];
	}


}
int temp[MAX];

void Sort5()
{


	int * data1 = data;
	int * data2 = temp;

	int n = 1;

	while(n<MAX)
	{
		//printf("%d\n",n);
		for(int i=0;i<MAX;i=i+n*2)
		{
			int start1 = i;
			int start2 = i+n;
			int stop2 = i+n+n-1;
			// 如果第二组的最后一个数的位置，在有限范围内。
			if(stop2<MAX)
			{
				Merge(data1,data2,start1,start2,stop2);
			}
			else{
				// 如果第二组第一个数，存在，有效。就可以继续排序。
				if (start2<MAX)
				{
					stop2 = MAX-1;
					Merge(data1,data2,start1,start2,stop2);
				}
				// 如果第二组第一个数，不存在，说明只能有一组数。这组数，直接赋值到目标就行。
				else
				{
					for(int j=start1;j<MAX;j++)
					{
						data2[j] = data1[j];
					}
				}
			}
		}
		// 把data的数据，归并排序一次后，放入data2
		/*
		for( i=0;i<MAX;i++)
		{
			printf("%d ",data2[i]);
		}	*/
	
	
		// 交换两个指针。
		int * t = data1;
		data1 = data2;
		data2 = t;
		n = n * 2;
	}
 
	if(data1 != data)
	{
		for(int i=0;i<MAX;i++)
		{
			data[i] = data1[i];
		}
	}
 
}

//堆排序

// 创建堆
void MakeHeap()
{
	int n = MAX;
	bool flag = true;
	while(flag)
	{
		flag = false;
		for(int i=n/2;i>0;i--)
		{
			// 先计算左右子结点位置，再比较大小。
			int left = i*2;
			int right = i*2+1;
			// 有右结点的时候，比较左右小的。
			// 先假设左边是小的。
			int k = left;
			// 如果有右边，如果右边比左边还小。
			// 小根堆得时候
			//if(n>=right && data[left-1]>data[right-1])
			if(n>=right && data[left-1]<data[right-1])
			{
				k = right;
			}
			// 左右小的再与根结点比，如果小于根结点，再交换。
			// 小根堆得时候
			//if (data[k-1] < data[i-1])
			// 大根堆得时候
			if (data[k-1] > data[i-1])
			{
				int t = data[k-1];
				data[k-1] = data[i-1];
				data[i-1] = t;
				flag = true;
			}
		}
	}
}
// 堆的调整。已经是一个堆了。根结点已经和最后一个结点互换。只负责，调整变成新的堆。
// n是当前堆数据的个数。
void HeapChange(int n)
{
	int i = 1;
	while(true)
	{
		int left = i*2;
		int right = i*2+1;
		int k = left;
		if (k>n) break;
		// 小根堆的时候
		//if (n>=right && data[left-1] > data[right-1])
		// 大根堆的时候
		if (n>=right && data[left-1] < data[right-1])
		{
			k = right;
		}
		// 小跟堆。
		//if (data[k-1] < data[i-1])
		// 大根堆
		if (data[k-1] > data[i-1])
		{
			int t = data[k-1];
			data[k-1] = data[i-1];
			data[i-1] = t;
			i = k;
		}else
		{
			break;
		}
	}
}

void Sort6()
{
	// 建立堆。
	
	MakeHeap();
	
	// 循环拿走根结点数据。之后调整堆
	for(int i=MAX-1;i>=0;i--)
	{
		int t = data[i];
		data[i] =data[0];
		data[0] = t;
		
		if(i>0)	HeapChange(i);
	}

}
void myfind(int value)
{
	for(int i=0;i<MAX;i++)
	{
		if (data[i] == value)
		{
			printf("%d ",i);
		}
	}
	printf("\n");
}

int main(int argc, char* argv[])
{
	Init();
	Show();
	long StartTime = GetTickCount();
	//Sort6();
	myfind(100);
	long StopTime = GetTickCount();
	printf("消耗时间：%d\n",StopTime-StartTime);
	Show();

	return 0;
}

