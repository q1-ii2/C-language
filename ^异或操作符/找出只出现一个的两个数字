#define _CRT_SECURE_NO_WARNINGS 1
#include<windows.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#include<assert.h>//断言函数
int* Find(int* arr, int numSize)
{
	//1.得到两个只出现一次的数^后的结果
	int x = 0, i = 0;
	for (i = 0; i < numSize; i++)
	{
		x ^= arr[i];//得到两个只出现一次的数的^后的结果
	}
	//2.定位这个结果中一个二进制位为1时,需要x向右移多少位的m
	int m = 0;
	for (i = 0; i < 32; i++)
	{//x是两个只出现一次的数^后的结果
	 //x>>i&1即这两个数不同的对应的一个二进制位数
	 //而我们现在要找这个二进制位数是几,赋给m
		if ((x >> i & 1) == 1)//别忘了要加(),因为&优先级比==优先级低
		{//x>>i是遍历x的32位二进制位的意思,而我们要的是
		 //x向右多少位的二进制才为1,我们找到一个二进制为1的即可
			m = i;
			break;
		}
	}
	//3.将这两个只出现一次的数分为两组
	int x1 = 0, x2 = 0;
	for (i = 0; i < numSize; i++)
	{
		if ((arr[i] >> m & 1) == 1)
		{
			x1 ^= arr[i];
			//这一组中成对的数^后会变为0
			//所以x1最后的结果为两个出现一次的数的其中一个
		}
		if ((arr[i] >> m & 1) == 0)
		{
			x2 ^= arr[i];
			//这一组中成对的数^后会变成0
			//所以x2最后的结果为两个出现一次的数的另一个
		}
	}
	//4.创建数组返回这两个值
	int* a = (int*)malloc(sizeof(int) * 2);
	//动态开辟，出了函数不会销毁
	//如果是静态开辟,出了函数,虽然原来a的地址还在,但是他的内容已经不属于a了
	//典型的返回栈空间地址带来的危害
	if (a != NULL)
	{
		a[0] = x1;
		a[1] = x2;
	}
	else
		exit(-1);
	return a;
}
int main(void)
{
	int arr[] = { 1,1,2,2,3,3,4,5,5,6,7,7,8,8,9,9 };
	int size = sizeof(arr) / sizeof(arr[0]);
	int* ptr = Find(arr, size);
	free(ptr);
	ptr = NULL;
	system("pause");
	return 0;
}